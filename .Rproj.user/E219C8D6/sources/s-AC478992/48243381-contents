---
title: "R-lunch: Extending R with C++"
subtitle: "An introduction to high performance computing with Rcpp and Armadillo"
author: "Lionel Voirol & Samuel Orso"
date: "25 May 2021"
output:
  xaringan::moon_reader:
    css: ["default", "assets/sydney-fonts.css", "assets/sydney.css"]
    self_contained: false # if true, fonts will be stored locally
    seal: true # show a title slide with YAML information
    includes:
      in_header: "assets/mathjax-equation-numbers.html"
    nature:
      beforeInit: ["assets/remark-zoom.js"]
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: '16:9' # alternatives '16:9' or '4:3' or others e.g. 13:9
      navigation:
        scroll: false # disable slide transitions by scrolling

---

<!-- # Xaringan support 

@Sam for an introduction to xaringan, see


https://spcanelon.github.io/xaringan-basics-and-beyond/

and

https://github.com/garthtarr/sydney_xaringan

also, check about [infinite moon reader](https://yihui.org/en/2019/02/ultimate-inf-mr/) for development
-->

```{r, load_refs, echo=FALSE, cache=FALSE, warning = F, message=F}
library(RefManageR)
BibOptions(check.entries = FALSE, 
           bib.style = "authoryear", 
           cite.style = 'authoryear', 
           style = "markdown",
           hyperlink = FALSE, 
           dashed = FALSE)
myBib <- ReadBib("assets/example.bib", check = FALSE)
library(Rcpp)
library(RcppArmadillo)
```

# Motivation
## State 1: programming with `R` is easy...

```{r echo=FALSE, fig.align='center', out.width=612, out.height=408}
knitr::include_graphics("assets/happy_programmer.jpg")
```

---

# Motivation
## State 2: ... but the run-time is so slow

```{r echo=FALSE, fig.align='center', out.width=612, out.height=408}
knitr::include_graphics("assets/sad_programmer.jpg")
```

---

# It is not a piece of
<img src="assets/pi-pie.png" style="height:100px; width:150px; position:absolute; top:7%; left:34.5%;"/>

Suppose your problem is to find $\pi$ using [Leibniz formula for $\pi$](https://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80). Leibniz's idea is to use the relation $$\frac{\pi}{4}=\arctan(1)$$
and the fact that $$\arctan(1) = \sum_{k=1}^\infty\frac{(-1)^k}{2k+1}$$

An algorithm to solve this problem is
```{r, eval = FALSE}
choose n and set
x <- 1.0
pi <- 1.0
for k from 1 to n
  x <- -x
  pi <- pi + x / (2.0 * k + 1.0)
return pi <- 4.0 * pi
```

---

# It is not a piece of
<img src="assets/pi-pie.png" style="height:100px; width:150px; position:absolute; top:7%; left:34.5%;"/>

For this particular task, the performances of several programming languages are compared.

```{r echo=FALSE, fig.align='center', out.width=750, out.height=450}
knitr::include_graphics("assets/logos.png")
```
---
# It is not a piece of
<img src="assets/pi-pie.png" style="height:100px; width:150px; position:absolute; top:7%; left:34.5%;"/>

```{r echo=FALSE, fig.align='center', out.width=750, out.height=450}
knitr::include_graphics("assets/speed_comparison.png")
```
(Source: [github.com/niklas-heer/speed-comparison](https://github.com/niklas-heer/speed-comparison))

---
# It is not a piece of
<img src="assets/pi-pie.png" style="height:100px; width:150px; position:absolute; top:7%; left:34.5%;"/>

```{r echo=FALSE, fig.align='center', out.width=750, out.height=450}
knitr::include_graphics("assets/speed_comparison_2.png")
```
(Source: [github.com/niklas-heer/speed-comparison](https://github.com/niklas-heer/speed-comparison))

---
# Compiled program

- Program is translated into native machine instruction (compilation)

```{r echo=FALSE, fig.align='center', out.width=750, out.height=111}
knitr::include_graphics("assets/compiled.png")
```

&nbsp;

&nbsp;

&nbsp;

```{r echo=FALSE, fig.align='center', out.width=750, out.height=117}
knitr::include_graphics("assets/compiled_pl.png")
```

---
# Interpreted program

- Program is translated into another code (bytecode). An interpreter then performs the required actions.

```{r echo=FALSE, fig.align='center', out.width=750, out.height=111}
knitr::include_graphics("assets/interpreted.png")
```

&nbsp;

&nbsp;

&nbsp;

```{r echo=FALSE, fig.align='center', out.width=750, out.height=117}
knitr::include_graphics("assets/interpreted_pl.png")
```

---
# `R` interfaces to other languages
`R` is basically written in `C` and `Fortran`. Available interfaces to other languages comprise:
- `C` via `.Call()` function
- `Fortran` via `.Fortran()` function
- `C++` via the `Rcpp` package
- `Python` via `reticulate`, `rPython`, `rJython` or `XRPython`
- `Julia` via `XRJulia`
- `JavaScript` via `V8`
- `Excel`, `JSON`, `SQL`, `Perl`, ...


See `r Citep(myBib,"chambers2017extending")` for a comprehensive discussion on interfacing `R`.

---
# Example: linear regression
How does `R` fit a linear regression? 

```{r, eval=F}
fit <- lm(y ~ x)
```

first layer: `R` function `lm`
```{r, eval=FALSE}
lm <- function(formula, ...){
  ...
  y <- model.response(mf, "numeric")
  ...
  x <- model.matrix(mt, mf, contrasts)
  ...
  lm.fit(x, y, ...) #<<
  ...
}
```

---
# Example: linear regression
How does `R` fit a linear regression?

second layer: `R` function `lm.fit`
```{r, eval=FALSE}
lm.fit <- function(x, y, ...){
  ...
  .Call(C_Cdqrls, x, y, tol, FALSE) #<<
  ...
}
```

third layer: `C` function `Cdqrls`
```{r, eval=FALSE}
SEXP Cdqrls(SEXP x, SEXP y, SEXP tol, SEXP chk)
```

`SEXP` is the datatype for a generic `R` object

Source: excellent post [A Deep Dive Into How R Fits a Linear Model](https://madrury.github.io/jekyll/update/statistics/2016/07/20/lm-in-R.html), `Cdqrls` [source code](https://github.com/wch/r-source/blob/trunk/src/library/stats/src/lm.c)


---

# Why using `C++` in `R`

`C++` is a general-purpose programming language developed initially as an extension of the `C` language that included classes for object-oriented programming. As opposed to `R` or `python`, `C++` is a compiled language and benefit from a fast execution time.

**Examples of ideal situations where to use `Rcpp` are:**

- Loop operations
- Recursive functions
- Operations on huge datasets
- Complex algorithms that need advanced data structures

---
# Extending `R` with `C++` via `Rcpp`
`Rcpp` is a popular package. 

```{r echo=FALSE, fig.align='center', out.width=500, out.height=374}
knitr::include_graphics("assets/popular_packages.png")
```

source: [KDnuggets](https://www.kdnuggets.com/2015/06/top-20-r-packages.html)

---
# Extending `R` with `C++` via `Rcpp`
You do not need to worry about `SEXP` and `.Call()`

<blockquote>
`Rcpp` can offer what we think is an easier to use and possibly even more consistent interface that is closer to the way `R` programmers work with their data.
.right[Dirk Eddelbuettel-- <cite>Seamless `R` and `C++`
Integration with `Rcpp`</cite>]
</blockquote>

---

# Objectives

- Overview of how to measure performance in `R` using profiling and timing tools.

- Overview of how to compile `Rcpp` code and use it in `R`.

- Basics of the `Rcpp` syntax.

- Extensions with the `C++` linear algebra libraries for scientific computing (`Armadillo`)


&nbsp;

```{r echo=FALSE, fig.align='center', out.width=350, out.height=160}
knitr::include_graphics("assets/thelogo.png")
```

<!-- --- -->

<!-- # Why using `C++` in `R`: Motivations -->

<!-- When working with complex computations in `R`, it is often the case that `R` is simply not fast enough.  -->

<!-- <div align="center"> -->
<!-- <iframe src="https://giphy.com/embed/pFZTlrO0MV6LoWSDXd" width="410" height="208" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/waiting-mr-bean-checking-time-pFZTlrO0MV6LoWSDXd">via GIPHY</a></p> -->
<!--  </div>  -->
<!-- <!-- .center[![](assets/wait.gif)] --> 

<!-- &nbsp; -->


<!-- In such cases, it is interesting to identify where are the bottleneck in a given code and rewrite these chunks of code in a lower-level language to benefit from faster execution time. -->





---
# Profiling `R` code 

When working on the efficiency of an `R` code it is important to identify which part of the code are the most time consuming so that you focus on improving the performance of these code chunks. 

You can profile `R` code with the use of the packages `Rprof` and `profvis` available with 
```{r, eval = F}
install.packages("profvis")
```

The syntax to perform a code profiling analysis is then
```{r, eval =F}
profvis({
  R sequence of execution to profile
})
```

Find examples and instructions [here](https://rstudio.github.io/profvis/).


---
# Profiling `R` code 

```{r, echo = F}
knitr::include_url("https://rstudio.github.io/profvis/examples.html", height = "460px")
```

---
# Measuring computation time in `R`

There exist various ways to measure computation time in `R`. We recommend using the `microbenchmark` package available with
```{r, eval =F}
install.packages("microbenchmark")
```

Using the function `microbenchmark` of this package, one can obtain an estimate of the computation time of an expression by evaluating it a large number of time.

---
# Measuring computation time in `R` 
For example let us consider benchmarking a simple `R` functions:

```{r}
library(microbenchmark)
f1 = function(x){sum(exp(x))}
microbenchmark::microbenchmark(f1)
```

These results summarize how long each query took: the minimum (`min`), lower and upper quartiles (`lq` and `uq`, respectively) and the mean, median and maximum, for each of the number of evaluations (`neval`, with the default value of 100 used in this case). `cld` reports the relative rank of each row in the form of 'compact letter display'.





---
# Optimizing `R` code

Before implementing a given code chunk that constitutes a bottleneck in `C++`, one should try to write the `R` code as efficiently as possible. There exists multiple way to improve the performance of an `R` code. 

General advice are for example to declare type and length of data structure explicitly rather then to append to existing data structure as well as to use efficiently implemented `R` functions when possible. 

Hence, there exist different ways to program a function in `R`, and depending on the functions and objects defined, different implementation will have different run-time.

&nbsp;

For a comprehensive discussion on the topic, we recommend [Efficient R programming](https://csgillespie.github.io/efficientR/).




---
# Optimizing `R` code: Illustration
To illustrate this notion, let us consider a simple example where we want to construct a vector of length $n$ with the sequence of integers from 1 to $n$.

<!-- Let us consider a simple example where we consider applying the function $$f: \mathbb{R}^p \rightarrow \mathbb{R} = n^{-1}\sum_{i=1}^n X_i$$ to each element of a list. -->

```{r, echo = F}
options(scipen =999)
```



.pull-left[

.scroll-box-5[
```{r, eval =T}
method1 = function(n) {
  vec = c() #<<
  for (i in seq_len(n))
    vec = c(vec, i)
  vec
}
```
]]
.pull-right[

.scroll-box-5[
```{r, eval =T}
method2 = function(n) {
  vec = vector(mode = "numeric", length = n) #<<
  for (i in seq_len(n))
    vec[i] = i
  vec
}
```
]]


```{r, cache =T, eval = F}
n = 1000
method3 = function(n) seq_len(n) #<<
microbenchmark(times = 100, unit = "s",  method1(n), method2(n), method3(n))
```
```{r, eval =F}
Unit: seconds
       expr         min           lq          mean       median           uq         max neval cld
 method1(n) 0.001233401 0.0013296325 0.00177022813 0.0014534635 0.0015910735 0.009250299   100   b
 method2(n) 0.000046447 0.0000495335 0.00005575704 0.0000550945 0.0000608630 0.000074331   100  a 
 method3(n) 0.000000394 0.0000005595 0.00000137795 0.0000009735 0.0000014435 0.000016710   100  a 
```

<!-- --- -->

<!-- `R` is know to be particularly inefficient with iterative loop such as `for` and `while` loop. When computing operations on specific data structures, the `apply()` family of functions proposes a higher level interface to manipulate and execute operations on slices of data structure in a repetitive way rather than by explicit `for` loops. Note however, that `apply()`-type functions are not necessarily faster than `for` loop, but they provide an easy interface such operations and increase code readability. -->

<!-- Find a comprehensive tutorial on the `apply()` family of functions [here](https://www.datacamp.com/community/tutorials/r-tutorial-apply-family). -->

---

# Introduction to `C++` and `Rcpp`

`Rcpp` is an `R` package that makes it very easy to connect `C++` code to `R`. Written by Dirk Eddelbuettel and Romain Francois, `Rcpp` let you compile and use `C++` functions directly in `R`.

You can install `Rcpp` with
```{r, eval =F}
install.packages("Rcpp")
```

Note that you will also need to install `Rtools` to compile `C++` code. To do so, follow the instructions [here](https://cran.r-project.org/bin/macosx/tools/) if you have a Mac or [here](https://cran.r-project.org/bin/windows/Rtools/) for a Windows system. 

If you are on Linux, depending on your distro, you can use:
```{bash, eval =F}
# RHEL/CentOS
sudo yum update
sudo yum install R
# Ubuntu
sudo apt-get update
sudo apt-get install r-base r-base-dev
```



---
# Introduction to `C++` and `Rcpp`

<blockquote>
`Rcpp` is a package that enables you to implement `R` functions in `C`++. It is easy to use even without deep knowledge of `C`++, because it is implemented so as to write your `C`++ code in a style similar to `R`. And `Rcpp` does not sacrifice execution speed for the ease of use, anyone can get high performance outcome.
.right[-- <cite>Rcpp for everyone</cite>]
</blockquote>

`Rcpp` provide three ways to embed `C++` code in `R`.

- `sourceCpp()` 

- `cppFunction()` 

- `evalCpp()` 



---
# Embedding `Rcpp` code in `R`
`sourceCpp()` let you source and compile a `.cpp` file inside of an `R` environment.
```{r, eval =F}
sourceCpp("cpp_file.cpp")
```


`cppFunction` let you write an `Rcpp` function directly inside of an `R` environment, for example:
```{r, eval =F}
cppFunction('int add(int x, int y, int z) {
  int sum = x + y + z;
  return sum;
}')
```
```{r}

```


`evalCpp()` let you evaluate a single `C++` statement inside of an `R` environment.
```{r, eval =F}
evalCpp('std::numeric_limits<double>::max()')
```


For this workshop, we will mostly consider using `sourceCpp()` and writing `C++` code in an specific `.cpp` file as this provide various advantages that we will cover.

---
# Data types and automatic data conversion in `R`

`R` implement an automatic data conversion when performing operations on different data types.

Hence, you can combine objects of different data types without errors. 

```{r}
typeof(c(1L,0.25))
typeof(c(1L,"a"))
```

Depending on the function called, automatic data conversion will not be able to transform data correctly.


```{r, eval =F}
sum(c(1.5,"a",3L))
```

```{r, eval =F}
Error in sum(c(1.5, "a", 3L)) : invalid 'type' (character) of argument
```


---
# Data types and methods in `C++`

In `C++`, all objects need to be defined with an explicit data types.

Hence, considering a `Rcpp` equivalent of `rep(0,n)` in `R`, we observe that we need to explicitly define the output data type as well as the data type of each objects declared in the function.
```{Rcpp, eval =F}
NumericVector create_empty_vector(int n) {#<<
  NumericVector v (n);#<<
  return v;
}
```

Furthermore, data types are associated with specific methods (also called member functions) that can be called on object. You can call member functions `f()` of object `v` in the form of `v.f()`. For example, a `NumericVector` as the method `length()`.
```{Rcpp, eval =F}
int get_length_vec(NumericVector x) {
  int length_vec = x.length(); #<<
  return length_vec;
}
```



---

# Correspondance of data type between `R`, `Rcpp` and `C++`

|Value | R vector|Rcpp vector|Rcpp matrix|Rcpp scalar|C++ scalar|
|:---:|:---:|:---:|:---:|:---:|:---:|
|Logical|`logical`  |`LogicalVector`| `LogicalMatrix`| - |`bool`|
|Integer|`integer`  |`IntegerVector`|`IntegerMatrix`|-|`int`|
|Real|`numeric` |`NumericVector`|`NumericMatrix`|-|`double`|
|Complex|`complex`  |`ComplexVector`| `ComplexMatrix`|`Rcomplex`|`complex`|
|String|`character`|`CharacterVector` (`StringVector`)| `CharacterMatrix` (`StringMatrix`)|`String`|`string`|
|Date  |`Date`     |`DateVector`|-|`Date`|-|
|Datetime  |`POSIXct`  |`DatetimeVector`|-| `Datetime` | `time_t` |

---
# Header of a `.cpp` file 
```{Rcpp, eval =F}
#include<Rcpp.h> #<<
using namespace Rcpp; #<<

// [[Rcpp::export]]
RETURN_TYPE FUNCTION_NAME(ARGUMENT_TYPE ARGUMENT){

    //do something

    return RETURN_VALUE;
}
```

- `#include<Rcpp.h> ` enables you to use classes and functions defined by the `Rcpp` package.

- `using namespace Rcpp;` specify the namespace. One could omit this argument in the header and prefix all functions and objects defined by `Rcpp` with `Rcpp::`.

- `// [[Rcpp::export]]` import the `Rcpp` function to you `R` global environment.



---
# Basic `C++` and `Rcpp` syntax 

`Rcpp` provides a high-level syntax for declaring `C++` functions easily. Here are some example comparing `R` and `Rcpp` syntax for basic operations.



| Operation| `R` |`Rcpp`|
|:---:|:---:|:---:|
| Vector constructor | `x = vector(mode = "numeric", length = 5)` | `NumericVector x(5);` |
| Vector indexing | `x[1]` | `x(0);` |
| Matrix constructor |`X = matrix(0,5,5)` |`NumericMatrix X(5, 5);`|
| Matrix indexing | `X[1,1]` | `X(0,0);` |
| DataFrame constructor |`df = data.frame("V1" = v1, "V2"= v2)`| `DataFrame df = DataFrame::create( Named("V1") = v1 , _["V2"] = v2 );`|



<!-- | Indexing vector | `vector(mode = "numeric", length = 5)` | `NumericVector xx(5);` | -->


---
# `Rcpp sugar`
<blockquote>
Put succinctly, the motivation of `Rcpp` sugar is to bring a subset of the high-level `R` syntax in `C`++.
.right[-- <cite>Dirk Eddelbuettel</cite>]
</blockquote>


The `Rcpp` library provide a variety of `R`-like functions. This set of functions is defined as `Rcpp sugar`. It provides vectorized procedures, functions for strings, statistical functions and other useful `R`-like functions. Among these functions we can find:

.pull-left[
**Mathematical function anf ifelse**
```{Rcpp, eval =F}
IntegerVector x;
IntegerVector y ;
abs( x )
exp( x )
floor( x )
ceil( x )
pow(x, z) # x to the power of z
ifelse( x > y, x, 2 )
```
]

.pull-right[
**d/q/p/r statistical functions**

```{Rcpp, eval =F}
x1 = dnorm(y1, 0, 1);
x2 = qnorm(y2, 0, 1);
x3 = pnorm(y3, 0, 1);
x4 = rnorm(n, 0, 1);
```

]


.footnote[Similar d/q/p/r functions are provided for the most common distributions:  beta, binom, cauchy, chisq, exp, f, gamma,
geom, hyper, lnorm, logis, nbeta, nbinom, nbinom_mu, nchisq, nf, norm, nt, pois, t, unif, and weibull.
]







---
# Rewriting `R` code in `Rcpp` (examples of functions)

.pull-left[

`R` code
```{r, eval =F}
# cumulative sum of a vector
cumsum(x)

# row means of a matrix
rowMeans(X)

# lag difference 
diff(x,1)

# Fibonacci sequence
fibo_r <- function(n) {
  if (n < 2) return(n)
  return(fibo_r(n-1) + fibo_r(n-2))
}



```
]
.pull-right[
`C++` code

.scroll-box-20[
```{Rcpp, eval =F}
// cumulative sum of a vector
// [[Rcpp::export]]
NumericVector cumsum_rcpp(NumericVector x) {
  double acc = 0;
  // init an accumulator var
  NumericVector res(x.size());
  // init result vector
  for (int i = 0; i < x.size(); i++){ 
    acc += x[i];
    res[i] = acc;
  }
  return res;
}


// row means of a matrix
// [[Rcpp::export]]
NumericVector row_means_cpp( NumericMatrix& X ) {
  
  int nRows = X.nrow();
  NumericVector out = no_init(nRows);
  
  for( int i=0; i < nRows; i++ ) {
    NumericMatrix::Row tmp = X(i, _);
    out[i] = do_mean( tmp );
  }
  
  return out;
  
}

// lag difference 
// [[Rcpp::export]]
NumericVector diff_lag_cpp(NumericVector x, int lag = 1) {
  int n = x.size();
  
  if (lag >= n) stop("`lag` must be less than `length(x)`.");
  
  NumericVector out(n - lag);
  
  for (int i = lag; i < n; i++) {
    out[i - lag] = x[i] - x[i - lag];
  }
  return out;
}

// Fibonacci sequence
// [[Rcpp::export]]
int fibo_cpp(int n) {
  if (n < 2) return(n);
  return(fibo_cpp(n-1) + fibo_cpp(n-2)); 
}

```
]]


---
# A note on `for` loop

`R` is known to be particularly inefficient with iterative loop such as `for` and `while` loops.
When you have such iterative control structure in your code and want to increase performance, it is a good strategy to rewrite these code chunks in `Rcpp`.

`for` loops in `C++` have a slightly different syntax than in `R`.

.pull-left[
```{r, eval =F}
print_i_r = function(i){
  for(j in 1:i){ #<<
    print(j)
  }
}
print_i_r(3)
```

```{r, eval =F}
1
2
3
```


]

.pull-right[
```{Rcpp, eval =F}
void print_i_cpp(int i) {
  for(int j = 1; j<=i; j ++){ #<<
    Rcout << j  << "\n";
  }
}
print_i_cpp(3)
```

```{r, eval =F}
1
2
3
```
]


---
# `C++` libraries


Similarly as in `R`, there exists a variety of external libraries that can be loaded and used in combination with `Rcpp`.

In `R` one would load an external library (package) with
```{r, eval =F}
library(name_of_the_external_library)
```

Similarly, one can load an external `C++` library by specifying in the header of a `.cpp` file with:

```{Rcpp, eval =F}
#include <name_of_the_external_library>
```

An analogue of [base](https://stat.ethz.ch/R-manual/R-devel/library/base/html/base-package.html) `R` in `C++` is the `C++` Standard Library (`std`). `std` is a collection of classes and functions written in the core language. One can use functions from `std` in a `Rcpp` script by specifying the prefix `std::` before a function.



---
# Including support for `Armadillo`  .pull-right-narrow[![](assets/armadillo_logo2.png)]

`Armadillo` is a `C++` library for linear algebra and scientific programming. It provides a high-level syntax and efficient functions to work with data that can be stored in vectors, matrices, cubes, dense and sparse matrices. The `R` package `RcppArmadillo` provides an interface from `R` to and from `Armadillo` by utilising the `Rcpp` `R`/`C++` interface library. Install it with:


```{r, eval =F}
install.packages("RcppArmadillo") # install RcppArmadillo
```

One can source a `.cpp` file that makes use of `Armadillo` by specifying the following arguments in the header of the `.cpp` file:

```{Rcpp, eval =F}
#include <RcppArmadillo.h>  #<<
// [[Rcpp::depends(RcppArmadillo)]] #<<
using namespace Rcpp;  #<<
```


`[[Rcpp::depends(RcppArmadillo)]]` ensures that `sourceCpp()` can compile and load the `RcppArmadillo` headers.


---
# `Armadillo` basic syntax

| Operation| R |Armadillo|
|:---:|:---:|:---:|
| Matrix constructor |`X = matrix(1,10,10)` |`X = ones(10,10)`|
|Matrix dimensions | `nrow(X)` and `ncol(X)`| `X.n_rows` and `X.n_cols` | 
|Matrix indexing | `X[1,1] `| `X(0,0)`| 
|Matrix transpose | `t(X)`| `x.t()`| 
|Extract matrix row or column | `X[, p:q]` and `X[, p:q]` | `X.cols(p, q)` and `X.rows(p, q)`| 
|Matrix joins operations | `X = cbind(A, B)` and `X = rbind(A, B)`| `X = join_horiz(A,B)` and `X = join_vert(A,B)` |
| Vector constructor| `x = numeric(10)`| `x = vec(10)`| 
| Vector dimension| `length(x)`| `x.n_elem`| 

.footnote[Note that we don't specify the `arma::` prefix that need to be specified when using `using namespace Rcpp;`
]





---
# Case study: The Haar Wavelet Variance 

We consider a real case application of rewriting `R` code in `C++` code.
For this example, we will consider a naive implementation of an estimator of the **Haar Wavelet Variance**.

This statistical quantity is used in the context of inference of time series models. 

Let $F_{\boldsymbol{\theta}}, \boldsymbol{\theta} \in \Theta \subseteq \mathbb{R}^{p}$ be the true data generating process of a univariate time series $\left\{Y_{t} ; t \in \mathbb{Z}\right\}$, the Generalized Method of Wavelet Moment (GMWM) estimator,  $\boldsymbol{\hat{\theta}}$,  exploits the mapping between $\boldsymbol{\theta}$ and the Wavelet Variance $\boldsymbol{\nu}$ by minimizing the distance between the empirical and estimated Wavelet Variance. 

Hence, the GMWM estimator is defined as
$$
\hat{\boldsymbol{\theta}}=\underset{\boldsymbol{\theta} \in \boldsymbol{\Theta}}{\operatorname{argmin}}(\hat{\boldsymbol{\nu}}-\boldsymbol{\nu}(\boldsymbol{\theta}))^{T} \boldsymbol{\Omega}(\hat{\boldsymbol{\nu}}-\boldsymbol{\nu}(\boldsymbol{\theta}))
$$


where $\hat{\boldsymbol{\nu}}$ is the empirical (estimated Wavelet Variance), ${\boldsymbol{\nu}}$ the theoretical (model-implied) Wavelet Variance and ${\boldsymbol{\Omega}}$ is a positive definite matrix.



See `r Citep(myBib,"guerrier2013wavelet")` for a comprehensive discussion on GMWM estimator.


---
# Case study: The Haar Wavelet Variance 
<div align = "center">
<img src="assets/wvar_fit_img.png" width="85%"/>
</div>



---

# Case study: The Haar Wavelet Variance



A simple algorithm to compute an estimator of the Wavelet Variance provide an interesting case study as it provide an example on how to mix the use of different `Rcpp` functions and `arma::` classes.

**Algorithm**

Let $Y_t,  t \in \{1, \ldots, T\}$ be a time series.

Set $J = log_2(T)-1$ and scale $\tau_j = 2^j$ where $j \in \{1, \ldots, J\}$ 

For each scale $\tau_j$:

$\hspace{.8cm}$ Compute the Wavelet coefficients defined as $\bar{W}_{j, t}=\sum_{l=0}^{L_{j}-1} \tilde{h}_{j, l} y_{t-l}, t \in \mathbb{Z}$ where $\tilde{h}_{j,l}$ is the Haar wavelet $\hspace{.8cm}$  filter for scale $\tau_j = 2^{j}$ and $L_j = T-2^j+1$

$\hspace{.8cm}$ We define the estimated Wavelet Variance for scale $j$, noted $\hat{\nu}^2(\tau_j)$ as $\text{var}(\bar{W}_{j, t})$

&nbsp;

 See `r Citep(myBib,"percival1995estimation")` for a comprehensive discussion on the estimation of the Wavelet Variance.

---


# Case study: The Haar Wavelet filter

The Wavelet Variance can be interpreted as the variance of a process after
it has been subject to an approximate bandpass filter.

The Haar wavelet's mother wavelet function can be defined as
$$\psi(t)=\left\{\begin{array}{ll}
1 & 0 \leq t<\frac{1}{2} \\
-1 & \frac{1}{2} \leq t<1 \\
0 & \text { otherwise }
\end{array}\right.$$

<!-- ![](assets/wvar_graph.png) -->
.pull-left[
<div align = "left">
<img src="assets/haar_filter_2_2.png" width="110%"/>
</div>

]

.pull-right[
<div align = "right">
<img src="assets/haar_filter_2.png" width="60%"/>
</div>
]


See `r Citep(myBib,"schimmack2016anatomy")` for a comprehensive discussion on the anatomy and properties of the Haar Wavelet filter.

---

# Case study: The Haar Wavelet Variance


<!-- ![](assets/wvar_graph.png) -->
<div align = "center">
<img src="assets/wvar_graph.png" width="90%"/>
</div>


---
# Case study: The Haar Wavelet Variance 

.pull-left[
`R` code
.scroll-box-14[
```{r, eval =F}
wvar_r = function(Xt){
  tsl = length(Xt)
  #define J
  J = log(tsl, 2) %>% floor()
  #create list to store elements
  haar_coeff_list = list()
  all_j =   J %>% seq()
  #define all scales
  scales = 2^all_j
  for(i_j in all_j){
    i_scale = scales[i_j]
    length_haar_transfo = tsl - 2^i_j + 1
    
    #define positive and negative yt
    coef_length = seq(length_haar_transfo)
    coef_scale_i = vector(length =length_haar_transfo, mode = "numeric")
    for(cl in coef_length){
      #define all position
      pos_scale_i = seq(cl, i_scale+cl-1)
      #define t/2 for scale j
      mid_id = length(pos_scale_i)/2
      #define left and right position
      pos_id = pos_scale_i[1:mid_id] 
      neg_id =  tail(pos_scale_i,length(pos_scale_i)/2)
      #calculate haar coefficient define as the weighted mean where weight equal -1, 1
      xt_neg = Xt[neg_id] * -1
      xt_pos = Xt[pos_id] 
      xt_weighted = c(xt_neg, xt_pos)
      coef_scale_i[cl] = mean(xt_weighted)
    }
    #append to growing vector
    haar_coeff_list[[i_j]] = coef_scale_i
  }
  #calculate wavelet variance
  wvariance = vector(mode = "numeric", length = length(all_j))
  for(i in seq(length(all_j))){
    haar_coef = haar_coeff_list[[i]]
    wvariance[i] = t(haar_coef) %*% haar_coef / length(haar_coef)
  }
  #return haar coefficients and wvariance
  return(wvariance)
}
```
]]
.pull-right[
`C++` code
.scroll-box-14[
```{Rcpp, eval =F}
arma::colvec wvar_cpp(arma::vec Xt) {
  int tsl = Xt.n_elem;
  // define J
  int J = floor(log(tsl) / log(2));
  //create list to store elements
  List haar_coef_list = List::create();
  IntegerVector all_j = seq_len( J );
  for(int i_j = 1; i_j <= J; i_j++) {
    // Define scale tau
    double i_scale = pow(2,i_j);
    int length_haar_transfo = tsl - i_scale + 1;
    //  create empty vector to fill
    NumericVector coef_scale_i (length_haar_transfo);
    for(int cl = 1; cl <= length_haar_transfo; cl++) {
      arma::vec pos_scale_i = arma::linspace(cl-1, i_scale +cl -2,  i_scale );
      //  define negative, positive and mid id
      int mid_id = pos_scale_i.n_elem/2 ;
      arma::vec neg_id = pos_scale_i.tail(mid_id);
      arma::vec pos_id = pos_scale_i.head(mid_id);
      // Convert to position to arma uvec
      arma::uvec pos_id_2 = arma::conv_to<arma::uvec>::from(pos_id);
      arma::uvec neg_id_2 = arma::conv_to<arma::uvec>::from(neg_id);
      // extract from vector
      arma::vec xt_neg =  Xt.elem(neg_id_2) * -1;
      arma::vec xt_pos =  Xt.elem(pos_id_2) ;
      //  compute coefficient
      arma::vec xt_weighted = join_cols(xt_neg, xt_pos);
      coef_scale_i(cl-1) = mean(xt_weighted);
    }
    // append to rcpp list
    haar_coef_list.push_back(coef_scale_i);
    }
  //  create empty vector for wavelet variance
  arma::colvec wvariance (J);
  // populate wvariance with wavelet variance 
  // computed on coefficient for each scale j
  for(int i = 0; i < J; i++) {
    arma::vec haar_coef = haar_coef_list[i];
    wvariance.row(i) = haar_coef.t() * haar_coef / haar_coef.n_elem;
  }
  return wvariance;
  
}
```
]]



---
# Case study: The Haar Wavelet Variance 
### Performance gain

```{r, echo = F, eval = T, fig.align='center', fig.height=6.2, fig.width=8.2}
load("mat_mean_perf.rda")
# t_col <- function(color, percent = 90, name = NULL) {
#   rgb.val <- col2rgb(color)
#   t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
#                max = 255,
#                alpha = (100 - percent) * 255 / 100,
#                names = name)
#   t.col
# }
# t_col("darkblue")
# t_col("darkorange", percent = .8)

mat_mean_perf_2 = mat_mean_perf /1e6
par(mar=c(5,7,1,1))
plot(x = 10^seq(5), y = mat_mean_perf_2[,2], 
     log="x", type = "b", xlab = "Sample size", ylim =c(0, max(mat_mean_perf_2)),
     cex.lab = 1.2, las = 1, 
     cex.main = 1.5,cex.axis = 1.1,
     col = "darkblue", pch = 16, yaxt ="n",ylab="")
mtext(side = 2, text = "Mean execution time (seconds)", line = 5.6, cex= 1.1)
axis(side=2, las = 2, at = )
grid(col="grey80", lty=1)
polygon(x = c(10^seq(5), rev(10^seq(5))), y = c(mat_mean_perf_2[,3], rev(mat_mean_perf_2[,5])), col = "#FF8C0019" , border = NA)
polygon(x = c(10^seq(5), rev(10^seq(5))), y = c(mat_mean_perf_2[,4], rev(mat_mean_perf_2[,6])), col = "#00008B19", border = NA)
lines(x = 10^seq(5), y = mat_mean_perf_2[,1], type ="b",  col = "darkorange", pch = 16)
lines(x = 10^seq(5), y = mat_mean_perf_2[,2], type ="b",  col = "darkblue", pch = 16)
legend("topleft",col = c("darkorange", "darkblue"), legend= c("R", "CPP"), lwd=1, pch = 16, bty ="n", cex = 1.5)


```




---

# Parallelisation with openMPI

`openMPI` is an API that enables parallelization of `C++` code. One can specify the dependency in the `.cpp` header file with: 

```{Rcpp, eval =F}
# include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
# include <omp.h> #<<
// [[Rcpp::plugins(openmp)]] #<<
```

It is then possible to parallelize an independent `for` loop with:

```{Rcpp, eval =F}
// [[Rcpp::export()]]
void omp2 (int n_threads = 1) { 
  omp_set_num_threads(n_threads) ; #<<
  # pragma omp parallel for #<<
  for (int i = 0 ; i < 10 ; i++) {
    Rcout << " " << i << " " ;
  }
}

```

To go further, check the post [Parallelization in rcpp via OpenMP](https://wbnicholson.wordpress.com/2014/07/10/parallelization-in-rcpp-via-openmp/)

---
# Take aways

- `R` is an interpreted language that allows fast development with a high-level syntax, but suffer from a slow run-time compared to lower-level languages. Many core `R` functions are already implemented in `Fortran` or `C`.

- There exists various ways to write an algorithm in `R`, and depending on the syntax, the object created and the functions called, different approach will lead to different performances.

- When working on improving the run time of an `R` code, one should identify the bottlenecks and measure the execution of the implementation using profiling and benchmark tools.

- `Rcpp` is a package that allows to interface `R` with `C++`. `Rcpp` provides already implemented classes and `R`-like functions for an easier development.

- There exists various external `C++` libraries that can be loaded and used in combination with `Rcpp`, such as for example linear algebra and scientific computing libraries such as `Armadillo` and `Eigen`. 

---

# Ressources (to go further)

- [Rcpp for everyone](https://teuder.github.io/rcpp4everyone_en/)

- [Advanced R](https://adv-r.hadley.nz/)

- [Seamless R and C++ Integration with Rcpp](https://www.springer.com/gp/book/9781461468677)

- [Efficient R programming](https://csgillespie.github.io/efficientR/)

- [Extending R](https://www.routledge.com/Extending-R/Chambers/p/book/9781498775717)

- [Armadillo documentation](http://arma.sourceforge.net/docs.html)
---


# References
```{r, results = "asis", echo=FALSE}
PrintBibliography(myBib)
```


---
class: sydney-blue, center, middle


# Thank you !
### Any questions?

.pull-down[
<a href="mailto:lionel.voirol@unige.ch">
.white[`r icons::fontawesome("paper-plane")` Lionel.Voirol@unige.ch]
</a>



<a href="http://github.com/lionelvoirol">
.white[`r icons::fontawesome("github")` @lionelvoirol]
</a>


<a href="mailto:samuel.orso@unige.ch">
.white[`r icons::fontawesome("paper-plane")` Samuel.Orso@unige.ch]
</a>



<a href="http://github.com/samorso">
.white[`r icons::fontawesome("github")` @samorso]
</a>


<a href="https://github.com/SMAC-Group/r_lunch_rcpp">
.white[`r icons::fontawesome("images")` SMAC-Group/r_lunch_rcpp]
</a>

]




